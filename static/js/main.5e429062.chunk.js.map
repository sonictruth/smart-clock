{"version":3,"sources":["config.ts","store.ts","screens/components/Time.tsx","screens/components/Weather.tsx","screens/MediaPlayer.tsx","screens/MainScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","backgroundImageUpdateIntervalSeconds","mediaPlayerStreams","id","name","url","isRadio","a","fetch","response","text","playlist","split","find","line","includes","weather","apiURL","process","REACT_APP_OPEN_WEATHER_URL","apiKey","REACT_APP_OPEN_WEATHER_KEY","latitude","longitude","units","tempSymbol","lang","weatherUpdateIntervalSeconds","weatherConfig","weatherUpdateIntervalMs","getCoordinates","Promise","resolve","reject","timeout","setTimeout","navigator","geolocation","getCurrentPosition","position","clearTimeout","getLocation","location","coords","console","error","useStore","create","set","setWeather","params","URLSearchParams","lat","toString","lon","exclude","appid","callURL","json","setInterval","date","Date","Time","time","state","toLocaleTimeString","timeStyle","className","temperatureSymbol","getFormatedTemperature","temp","Math","round","parseFloat","Weather","MediaPlayerState","props","metersPerSecond","isSimple","simple","current","iconId","humidity","wind_speed","daily","map","day","key","ts","dt","toLocaleDateString","weekday","timezone","alerts","alert","start","toLocaleString","undefined","dayPeriod","event","streamIDLocalStorageKey","MediaPlayer","setTimeoutReplayRef","useRef","useState","localStorage","getItem","streamID","setSteamID","Stopped","mediaPlayerState","setMediaPlayerState","volume","setVolume","streams","setStreams","currentStream","setCurrentSteam","streamURL","setStreamURL","lastErrorDetails","setLastErrorDetails","useEffect","urlSearchParams","window","search","Object","fromEntries","entries","loadPlaylist","stream","hasError","Loading","errorText","Error","retryStream","reduce","acc","curr","index","length","streamNameAndUrl","push","replace","disableTouchProps","onTouchEnd","stopPropagation","onMouseUp","Playing","width","height","playing","controls","loop","onPlay","onError","errorObject","errorInfo","errorMessage","type","details","handleReactPlayerError","min","max","step","value","onChange","target","setItem","handleChannelSelection","backgrounds","Array","from","keys","MainScreen","routes","path","Component","getRandomBackground","backgroundURL","setBackgroundURL","floor","random","timerID","clearInterval","style","backgroundImage","isFullscreen","App","swipeDirection","setSwipeDirection","touchPositionsRef","end","history","useHistory","useLocation","getPosition","clientX","targetTouches","handleTouchStart","handleTouchMove","handleTouchEnd","currentLocation","pathname","touchPositions","currentLocationRouteIndex","findIndex","route","nextLocationRouteIndex","document","fullscreenElement","body","requestFullscreen","onMouseDown","onMouseMove","onTouchMove","onTouchStart","TransitionGroup","component","CSSTransition","classNames","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5e429062.chunk.js","sourcesContent":["const config: Config = {\n\n    backgroundImageUpdateIntervalSeconds: 600,\n\n    mediaPlayerStreams: [\n        {\n            id: '10',\n            name: 'EuroNews',\n            url: 'https://www.youtube.com/watch?v=sPgqEHsONK8',\n            isRadio: false,\n        },\n        {\n            id: '20',\n            name: 'Al Jazeera',\n            url: 'https://www.youtube.com/watch?v=-upyPouRrB8',\n            isRadio: false,\n        },\n        {\n            id: '30',\n            name: 'Sky News',\n            url: 'https://www.youtube.com/watch?v=9Auq9mYxFEE',\n            isRadio: false,\n        },\n        // Stream pre-processing for handling tokens, scraping, selecting specific streams \n        {\n            id: '150',\n            name: 'Digi 24 Low',\n            url: async () => {\n                const response =\n                    await fetch('https://dai.google.com/linear/hls/event/OQfdjUhHSDSlb1fJVzehsQ/master.m3u8');\n                const playlist =\n                    await response.text();\n                const url = playlist\n                    .split('\\n')\n                    .find(line => line.includes('bandwidth/2917391.m3u8'));\n                return url;\n            },\n            isRadio: false,\n        },\n        {\n            id: '41',\n            name: 'Kiss FM',\n            url: 'https://live.kissfm.ro/kissfm.aacp',\n            isRadio: true,\n        },\n        {\n            id: '43',\n            name: 'Digi FM',\n            url: 'https://edge76.rcs-rds.ro/digifm/digifm.mp3',\n            isRadio: true,\n        },   \n        {\n            id: '50',\n            name: 'TVRi',\n            url: 'https://mn-nl.mncdn.com/tvri_test/smil:tvri_test.smil/playlist.m3u8',\n            isRadio: false,\n        },\n        {\n            id: '60',\n            name: '3/24',\n            url: 'https://directes-tv-int.ccma.cat/int/ngrp:324_web/chunklist_b1728000.m3u8',\n            isRadio: false,\n        },\n        {\n            id: '70',\n            name: 'PrimaTV',\n            url: 'https://stream1.1616.ro:1945/prima/livestream/playlist.m3u8?wowzatokenhash=hOdIznDoakApEuQ8FaFI3yrJuBMZHqCB7B3cWTmRWsc=',\n            isRadio: false,\n        },\n        {\n            id: '100',\n            name: 'Radio 3',\n            url: 'https://rtvelivestreamv3.akamaized.net/rne_r3_main.m3u8',\n            isRadio: true,\n        },\n        {\n            id: '110',\n            name: 'iCat',\n            url: 'https://directes-radio-int.ccma.cat/int/mp4:icatfm/playlist.m3u8',\n            isRadio: true,\n        },\n        {\n            id: '120',\n            name: 'RadioParadise',\n            url: 'http://stream.radioparadise.com/aac-128',\n            isRadio: true,\n        },\n        {\n            id: '130',\n            name: 'LoFi',\n            url: 'https://www.youtube.com/watch?v=5qap5aO4i9A',\n            isRadio: false,\n        },\n        // Weekly updated yourube playlist\n        {\n            id: '140',\n            name: 'UK Weekly Playlist',\n            url: 'https://youtube.com/playlist?list=PLx0sYbCqOb8Q_CLZC2BdBSKEEB59BOPUM',\n            isRadio: false,\n        },\n    ],\n\n    weather: {\n        apiURL: process.env.REACT_APP_OPEN_WEATHER_URL || 'https://www.sonicpix.ro/owproxy/',\n        apiKey: process.env.REACT_APP_OPEN_WEATHER_KEY || 'nokey',\n        latitude: 41.376681,\n        longitude: 2.176177,\n        units: 'metric',\n        tempSymbol: '°C',\n        lang: 'en',\n        weatherUpdateIntervalSeconds: 3600,\n    }\n}\n\nexport default config;\n","import create from 'zustand';\nimport config from './config';\n\nconst weatherConfig = config.weather;\nconst weatherUpdateIntervalMs = weatherConfig.weatherUpdateIntervalSeconds * 1000;\nconst apiKey = weatherConfig.apiKey;\nconst apiURL = weatherConfig.apiURL;\nconst positionTimeoutMs = 5000;\n\nasync function getCoordinates() {\n    return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => reject(), positionTimeoutMs);;\n        navigator.geolocation.getCurrentPosition(position => {\n            clearTimeout(timeout);\n            resolve(position);\n        }, reject);\n    });\n}\n\nasync function getLocation() {\n    const location = {\n        latitude: weatherConfig.latitude,\n        longitude: weatherConfig.longitude\n    }\n    try {\n        const position: any = await getCoordinates();\n        location.latitude = position.coords.latitude;\n        location.longitude = position.coords.longitude;\n    } catch (error) {\n        console.error('Unable to get location', error);\n    }\n    return location;\n}\n\nconst useStore = create(\n    set => {\n        async function setWeather() {\n\n            const location = await getLocation();\n\n            const params = new URLSearchParams({\n                units: weatherConfig.units,\n                lang: weatherConfig.lang,\n                lat: location.latitude.toString(),\n                lon: location.longitude.toString(),\n                exclude: 'minutely,hourly',\n                appid: apiKey,\n            }).toString()\n\n            const callURL = `${apiURL}?${params}`;\n            const response = await fetch(callURL);\n\n            set({ weather: await response.json() });\n        };\n\n        setInterval(() => set({ date: new Date() }), 1000);\n        setInterval(() => setWeather(), weatherUpdateIntervalMs);\n        setWeather();\n        return ({ date: new Date(), weather: null })\n    })\n\n\nexport default useStore;\n","import './Time.scss';\nimport useStore from '../../store';\n\nfunction Time() {\n    const time = useStore((state: any) =>\n        state.date.toLocaleTimeString('en-GB', { timeStyle: 'short' })\n    );\n\n    return <div className=\"Time\">\n        {time}\n    </div>;\n}\n\nexport default Time;","import useStore from '../../store';\nimport WeatherIcon from 'react-icons-weather';\nimport './Weather.scss';\nimport config from '../../config';\n\nconst temperatureSymbol: string = config.weather.tempSymbol;\n\nfunction getDayPeriodFromUnixTS(ts: number): string {\n    return new Date(ts * 1000).toLocaleString(\n        undefined, { weekday: 'long', dayPeriod: 'short' }\n    )\n}\n\nfunction getDayOfWeeekeStringFromUnixTS(ts: number) {\n    return new Date(ts * 1000).toLocaleDateString(\n        'en', { weekday: 'short', day: 'numeric' }\n    )\n}\n\nfunction getKmPerHourFromMetersPerSecond(metersPerSecond: string) {\n    return Math.round(\n        (parseFloat(metersPerSecond) * 3.6)\n    ).toString() + 'Km/h';\n}\n\nfunction getFormatedTemperature(temp: string) {\n    return Math.round(parseFloat(temp)) + temperatureSymbol;\n}\n\nfunction Weather(props: any) {\n    const weather: any = useStore((state: any) => state.weather);\n\n    const isSimple: boolean = props.simple;\n\n    return (\n        <div className=\"Weather\">\n            {!weather && <div>Loading...</div>}\n            {weather && weather.current &&\n                (isSimple ?\n                    <div>\n                        <WeatherIcon\n                            name=\"owm\"\n                            iconId={weather.current.weather[0].id.toString()} />\n                        &nbsp;&nbsp;\n                        {getFormatedTemperature(weather.current.temp)}\n                    </div>\n                    :\n                    <div className=\"WeatherBackground\">\n                        <div className=\"WeatherCurrent\">\n                            <div className=\"columns is-mobile\">\n                                <div className=\"column WeatherHumidity\">\n                                    H: {weather.current.humidity}%\n                                </div>\n\n                                <div className=\"column\">\n                                    <WeatherIcon\n                                        name=\"owm\"\n                                        iconId={weather.current.weather[0].id.toString()} />\n                                    &nbsp;&nbsp;\n                                    {getFormatedTemperature(weather.current.temp)}\n                                </div>\n\n                                <div className=\"column WeatherWind\">\n                                    W: {getKmPerHourFromMetersPerSecond(weather.current.wind_speed)}\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"WeatherDaily\">\n                            <div className=\"columns is-mobile\">\n                                {weather.daily.map((day: any, key: number) =>\n                                    <div key={key}\n                                        className=\"column\">\n                                        <div>{getDayOfWeeekeStringFromUnixTS(day.dt)}</div>\n                                        <div className=\"WeatherIcon\"><WeatherIcon\n                                            name=\"owm\"\n                                            iconId={day.weather[0].id.toString()} /></div>\n                                        <div>\n                                            {getFormatedTemperature(day.temp.day)}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n\n                        <div className=\"WeatherAlerts\">\n                           Timezone: {weather.timezone}\n\n                            {weather.alerts && weather.alerts.map(\n                                (alert: any, key: number) =>\n                                    key === 0 && <div key={key}>\n                                        {getDayPeriodFromUnixTS(alert.start)}: {alert.event}.\n                                    </div>\n                            )}\n                        </div>\n                    </div>\n                )\n            }\n        </div>\n    );\n}\n\nexport default Weather;","import {\n    useEffect,\n    useState,\n    useRef,\n} from 'react';\nimport Time from './components/Time';\nimport Weather from './components/Weather';\nimport ReactPlayer from 'react-player';\nimport config from '../config';\nimport './MediaPlayer.scss';\n\nconst streamIDLocalStorageKey = 'streamID';\n\nconst streamErrorRetryMs = 10000;\n\nenum MediaPlayerState {\n    Loading = 'loading',\n    Error = 'error',\n    Playing = 'playing',\n    Stopped = 'stopped',\n}\n\nfunction MediaPlayer() {\n\n    const setTimeoutReplayRef = useRef();\n\n    const [streamID, setSteamID] = useState(\n        localStorage.getItem(streamIDLocalStorageKey)\n    );\n\n    const [mediaPlayerState, setMediaPlayerState] =\n        useState<MediaPlayerState>(MediaPlayerState.Stopped);\n\n    const [volume, setVolume] = useState(1);\n\n    const [streams, setStreams] = useState<Stream[]>();\n\n    const [currentStream, setCurrentSteam] = useState<Stream>();\n\n    const [streamURL, setStreamURL] = useState();\n\n    const [lastErrorDetails, setLastErrorDetails] = useState('');\n\n    useEffect(() => () =>\n        clearTimeout(setTimeoutReplayRef.current)\n        , []);\n\n    useEffect(() => {\n        (async () => {\n            let streams: Stream[] = config.mediaPlayerStreams;\n            try {\n                const urlSearchParams = new URLSearchParams(window.location.search);\n                const params = Object.fromEntries(urlSearchParams.entries());\n                if (params.playlist) {\n                    streams = await loadPlaylist(params.playlist);\n                }\n            } catch (error) {\n                console.error('Unable to load custom playlist', error);\n            }\n            setStreams(streams);\n        })();\n    }, []);\n\n    useEffect(() =>\n        setCurrentSteam(\n            streams?.find(stream => stream.id === streamID)\n        )\n        , [streamID, streams]);\n\n    useEffect(() => {\n        (async () => {\n            let url;\n            let hasError = false;\n            setMediaPlayerState(MediaPlayerState.Loading);\n\n            try {\n                if (currentStream) {\n                    if (typeof currentStream.url === 'function') {\n                        url = await currentStream.url();\n                    } else {\n                        url = currentStream.url;\n                    }\n                }\n            } catch (error) {\n                const errorText = 'Unable to get custom URL';\n                setLastErrorDetails(errorText);\n                console.error(errorText, error);\n                hasError = true;\n            }\n\n            if (hasError) {\n                setLastErrorDetails('Unable to load custom url');\n                setMediaPlayerState(MediaPlayerState.Error);\n                retryStream(currentStream);\n            } else {\n                setMediaPlayerState(\n                    url ? MediaPlayerState.Loading : MediaPlayerState.Stopped\n                );\n            }\n            setStreamURL(url);\n        })()\n    }, [currentStream]);\n\n    const retryStream = (currentStream: Stream | undefined) => {\n        clearTimeout(setTimeoutReplayRef.current);\n        setTimeoutReplayRef.current = setTimeout(() => {\n            if (currentStream) {\n                setCurrentSteam({ ...currentStream });\n            }\n        }, streamErrorRetryMs) as any;\n    }\n\n    const loadPlaylist = async (url: string): Promise<Stream[]> => {\n        const response = await fetch(url);\n        const playlist = await response.text();\n        const streams = playlist\n            .split('#EXTINF:')\n            .reduce(\n                (acc, curr, index) => {\n                    const line = curr.split(',');\n                    if (line.length === 2) {\n                        const streamNameAndUrl = line[1].split('\\n');\n                        acc.push({\n                            id: index.toString(),\n                            name: streamNameAndUrl[0],\n                            url: streamNameAndUrl[1]\n                                .replace('http://', 'https://'),\n                            isRadio: false,\n                        });\n                    }\n                    return acc;\n                }, [] as Stream[]);\n        return streams;\n    }\n\n    const handleChannelSelection = (streamID: string) => {\n        setLastErrorDetails('');\n        clearTimeout(setTimeoutReplayRef.current);\n        setSteamID(streamID);\n        localStorage.setItem(streamIDLocalStorageKey, streamID);\n    }\n\n    const handleVolumeChange = (event: any) =>\n        setVolume(parseFloat(event.target.value));\n\n    const handleReactPlayerOnPlay = () => {\n        setMediaPlayerState(MediaPlayerState.Playing);\n    }\n\n    const handleReactPlayerError = (error: any, errorInfo: any) => {\n        setMediaPlayerState(MediaPlayerState.Error);\n        const errorMessage = errorInfo.type ? `${errorInfo.type} ${errorInfo.details}`: error;\n        setLastErrorDetails(errorMessage); \n        console.error('React player error:', error, errorInfo);\n        if (errorInfo?.details === 'manifestLoadError' ||\n            errorInfo?.details === 'manifestLoadTimeOut' ||\n            errorInfo?.details === 'bufferStalledError') {\n            retryStream(currentStream);\n        }\n    }\n\n    const disableTouchProps = {\n        onTouchEnd: (event: any) =>\n            event.stopPropagation(),\n        onMouseUp: (event: any) =>\n            event.stopPropagation(),\n    };\n\n    return <div className=\"MediaPlayer\" >\n        <div className=\"MediaPlayerScreen\">\n            {(mediaPlayerState === MediaPlayerState.Stopped) &&\n                <div className=\"MediaPlayerScreen-info\">\n                    <h1>Media Player 📺</h1>\n                </div>\n            }\n            {(mediaPlayerState === MediaPlayerState.Error) &&\n                <div className=\"MediaPlayerScreen-status\">\n                    <h1>😢 Error</h1>\n                    <div>We are having problems loading {currentStream?.name}.</div>\n                    <small>{lastErrorDetails}</small>\n                </div>\n            }\n            {(mediaPlayerState === MediaPlayerState.Loading) &&\n                <div className=\"MediaPlayerScreen-status\">\n                    <h1>⏳</h1>\n                    Loading {currentStream?.name}...\n                </div>\n            }\n            {(mediaPlayerState === MediaPlayerState.Playing && currentStream?.isRadio) &&\n                <div className=\"MediaPlayerScreen-status\">\n                    <h2>📻{currentStream.name}</h2>\n                    <h1><Time /></h1>\n                </div>\n            }\n            {\n                mediaPlayerState !== MediaPlayerState.Stopped &&\n                mediaPlayerState !== MediaPlayerState.Error &&\n\n                <ReactPlayer\n                    className=\"MediaPlayerReactPlayer\"\n                    width='100%'\n                    height='100%'\n                    url={streamURL}\n                    playing={true}\n                    controls={false}\n                    loop={true}\n                    volume={volume}\n                    onPlay={() => handleReactPlayerOnPlay()}\n                    onError={(error: any, errorObject: any) =>\n                        handleReactPlayerError(error, errorObject)}\n                />\n            }\n        </div>\n\n        <div className=\"MediaPlayerBottom\">\n\n            <div>\n                <Time />\n            </div>\n            <div>\n                <Weather simple={true} />\n            </div>\n            <div {...disableTouchProps}>\n                <input type='range'\n                    min={0} max={1}\n                    step='any'\n                    value={volume}\n                    onChange={handleVolumeChange} />\n            </div>\n            <div {...disableTouchProps}>\n                <div className=\"select is-small is-dark\">\n                    <select\n                        value={streamID || ''}\n                        onChange={event => handleChannelSelection(event.target.value)}>\n                        <option\n                            value=''>\n                            ⇨ Choose channel\n                        </option>\n                        {streams &&\n                            streams.map((stream: any, key: number) =>\n                                <option\n                                    key={key}\n                                    value={stream.id}>\n                                    {stream.name}\n                                </option>)}\n                    </select>\n                </div>\n\n            </div>\n        </div>\n    </div>;\n}\n\nexport default MediaPlayer;\n","import './MainScreen.scss';\nimport Time from './components/Time';\nimport Weather from './components/Weather';\nimport {\n    useState,\n    useEffect,\n} from 'react';\nimport config from '../config';\n\nconst backgrounds = Array.from(Array(40).keys())\n    .map(index => `d${index + 1}.jpeg`\n    );\n\nconst backgroundImageUpdateIntervalSeconds\n    = config.backgroundImageUpdateIntervalSeconds;\n\nfunction MainScreen() {\n    const [backgroundURL, setBackgroundURL] = useState(getRandomBackground());\n\n    useEffect(() => {\n        const timerID = setInterval(() => setBackgroundURL(\n            getRandomBackground()),\n            backgroundImageUpdateIntervalSeconds * 1000\n        );\n        return () => clearInterval(timerID);\n    }, []);\n\n    function getRandomBackground() {\n        return backgrounds[Math.floor(Math.random() * backgrounds.length)];\n    }\n\n    return <div\n        className=\"MainScreen\"\n        style={{\n            backgroundImage:\n                `url(${process.env.PUBLIC_URL}/backgrounds/${backgroundURL})`\n        }}>\n        <div className=\"top\" >\n            <Time />\n        </div>\n        <div className=\"bottom\">\n            <Weather />\n        </div>\n    </div>;\n}\n\nexport default MainScreen;\n","import './App.scss';\nimport {\n  useRef,\n  useState,\n} from 'react';\nimport {\n  Route,\n  useHistory,\n  useLocation,\n  Switch,\n} from 'react-router-dom';\n\nimport {\n  TransitionGroup,\n  CSSTransition,\n} from 'react-transition-group';\n\nimport MediaPlayer from './screens/MediaPlayer';\nimport MainScreen from './screens/MainScreen';\n\nconst config = {\n  routes: [\n    {\n      path: \"/MediaPlayer\",\n      Component: MediaPlayer,\n    },\n    {\n      path: \"/\",\n      Component: MainScreen,\n    },\n  ],\n}\n\nlet isFullscreen = false;\n\nfunction App() {\n\n  const [swipeDirection, setSwipeDirection]\n    = useState<'left' | 'right'>('left');\n\n  const touchPositionsRef = useRef<TouchPosition>({\n    start: 0,\n    end: 0\n  });\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const getPosition = (event: any): number =>\n    event.clientX || (\n      (event.targetTouches && event.targetTouches.length > 0) ?\n        event.targetTouches[0].clientX : 0\n    );\n\n  const handleTouchStart = (event: any) => {\n    touchPositionsRef.current.start = getPosition(event);\n    touchPositionsRef.current.end = getPosition(event);\n  }\n\n  const handleTouchMove = (event: any) => {\n    touchPositionsRef.current.end = getPosition(event);\n  }\n\n  const handleTouchEnd = (event: any) => {\n    const currentLocation = history.location.pathname;\n    const touchPositions = touchPositionsRef.current;\n    const currentLocationRouteIndex = config.routes.findIndex(\n      (route: any) =>\n        route.path === currentLocation\n    );\n\n    let nextLocationRouteIndex = null;\n\n    if (touchPositions.start - touchPositions.end > 50) {\n      nextLocationRouteIndex = currentLocationRouteIndex - 1;\n      if (nextLocationRouteIndex < 0) {\n        nextLocationRouteIndex = config.routes.length - 1;\n      }\n      setSwipeDirection('left');\n    } else if (touchPositions.start - touchPositions.end < -50) {\n      nextLocationRouteIndex = currentLocationRouteIndex + 1;\n      if (nextLocationRouteIndex > config.routes.length - 1) {\n        nextLocationRouteIndex = 0;\n      }\n      setSwipeDirection('right');\n    } else {\n      if(!isFullscreen || document.fullscreenElement === null) {\n        try {\n        document.body.requestFullscreen();\n        isFullscreen = true;\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n\n    if (nextLocationRouteIndex !== null) {\n      history.push(config.routes[nextLocationRouteIndex].path);\n    }\n    touchPositions.start = 0;\n\n  }\n  return (\n    <div\n      className={`App AppSwipe-${swipeDirection}`}\n      onMouseDown={handleTouchStart}\n      onMouseMove={handleTouchMove}\n      onMouseUp={handleTouchEnd}\n\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n      onTouchStart={handleTouchStart}\n    >\n      <div className=\"AppPortraitWarning\">\n        ⚠️ Please rotate your device.\n      </div>\n\n      <TransitionGroup\n        component={null}\n      >\n        <CSSTransition\n          key={location.pathname}\n          classNames=\"AppScreen\"\n          timeout={300}\n        /* FIXME: findDomNode warning*/\n        /* nodeRef={screenNodeRef} */\n        >\n          <Switch location={location}>\n            {config.routes.map(({ path, Component }) => (\n              <Route\n                key={path}\n                path={path}\n              >\n                <div\n                  /* ref={screenNodeRef} */\n                  className=\"AppScreen\"  >\n                  <Component />\n                </div>\n              </Route>\n            ))}\n          </Switch>\n        </CSSTransition>\n      </TransitionGroup>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter as Router,\n} from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}