{"version":3,"sources":["config.ts","store.ts","screens/components/Time.tsx","screens/components/Weather.tsx","screens/MediaPlayer.tsx","screens/MainScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","youtubePlaylistURL","mediaPlayerStreams","name","url","isRadio","weather","key","process","REACT_APP_OPEN_WEATHER_KEY","latitude","longitude","units","tempSymbol","lang","weatherUpdateIntervalSeconds","weatherConfig","weatherUpdateIntervalMs","getCoordinates","a","Promise","resolve","reject","timeout","setTimeout","navigator","geolocation","getCurrentPosition","position","clearTimeout","getLocation","location","coords","console","error","useStore","create","set","setWeather","params","fetch","response","json","setInterval","date","Date","Time","time","state","toLocaleTimeString","undefined","timeStyle","className","temperatureSymbol","getFormatedTemperature","temp","Math","round","parseFloat","Weather","props","metersPerSecond","isSimple","simple","current","iconId","id","toString","humidity","wind_speed","daily","map","day","ts","dt","toLocaleDateString","weekday","alerts","alert","start","toLocaleString","dayPeriod","event","mediaURLLocalStorageKey","streams","MediaPlayer","playerRef","useRef","useState","volume","setVolume","playing","setPlaying","localStorage","getItem","setURL","currentStream","find","stream","handleStopPropagating","stopPropagation","disableTouchProps","onTouchEnd","onMouseUp","ref","width","height","controls","loop","onReady","type","min","max","step","value","onChange","target","onClick","screenfull","isEnabled","el","node","findDOMNode","request","defaultValue","setItem","setAndSaveURL","backgrounds","MainScreen","routes","path","component","getRandomBackgrounnd","backgroundURL","setBackgroundURL","floor","random","length","useEffect","timerID","backgroundUpdateIntervalSeconds","clearInterval","style","backgroundImage","App","React","touchStart","setTouchStart","touchEnd","setTouchEnd","history","useHistory","getPosition","clientX","targetTouches","handleTouchStart","handleTouchMove","handleTouchEnd","currentLocation","pathname","currentLocationRouteIndex","findIndex","route","nextLocationRouteIndex","push","onMouseDown","onMouseMove","onTouchMove","onTouchStart","i","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e07c77a.chunk.js","sourcesContent":["const config = {\n\n    youtubePlaylistURL: 'https://www.youtube.com/embed/videoseries?list=PLywsZdsYYHTZNdHTYDNooq86TCJLPCjoK',\n\n    mediaPlayerStreams: [\n        {\n            name: 'EuroNews',\n            url: 'https://www.youtube.com/watch?v=sPgqEHsONK8',\n            isRadio: false,\n        },\n        {\n            name: 'Al Jazeera',\n            url: 'https://www.youtube.com/watch?v=-upyPouRrB8',\n            isRadio: false,\n        },\n        {\n            name: 'Sky News',\n            url: 'https://www.youtube.com/watch?v=9Auq9mYxFEE',\n            isRadio: false,\n        },\n        {\n            name: 'Digi24',\n            url: 'https://dai.google.com/linear/hls/event/OQfdjUhHSDSlb1fJVzehsQ/master.m3u8',\n            isRadio: false,\n        },\n        {\n            name: 'TVRi',\n            url: 'https://mn-nl.mncdn.com/tvri_test/smil:tvri_test.smil/playlist.m3u8',\n            isRadio: false,\n        },   \n        {\n            name: '3/24',\n            url: 'https://directes-tv-int.ccma.cat/int/ngrp:324_web/chunklist_b1728000.m3u8',\n            isRadio: false,\n        },\n        {\n            name: 'PrimaTV',\n            url: 'https://stream1.1616.ro:1945/prima/livestream/playlist.m3u8?wowzatokenhash=hOdIznDoakApEuQ8FaFI3yrJuBMZHqCB7B3cWTmRWsc=',\n            isRadio: false,\n        },\n        {\n            name: 'Antena 3',\n            url: 'https://ivm.antenaplay.ro/live/a3/playlist.m3u8',\n            isRadio: false,\n        },\n        {\n            name: 'Antena 1',\n            url: 'https://ivm.antenaplay.ro/live/a1/playlist.m3u8',\n            isRadio: false,\n        },\n        {\n            name: 'Radio 3',\n            url: 'https://rtvelivestreamv3.akamaized.net/rne_r3_main.m3u8',\n            isRadio: true,\n        },\n        {\n            name: 'iCat',\n            url: 'https://directes-radio-int.ccma.cat/int/mp4:icatfm/playlist.m3u8',\n            isRadio: true,\n        },\n        {\n            name: 'RadioParadise',\n            url: 'http://stream.radioparadise.com/aac-128',\n            isRadio: true,\n        },\n        {\n            name: 'LoFi',\n            url: 'https://www.youtube.com/watch?v=5qap5aO4i9A',\n            isRadio: false,\n        },\n        // Weekly updated yourube playlist\n        {\n            name: 'UK Weekly Playlist',\n            url: 'https://youtube.com/playlist?list=PLx0sYbCqOb8Q_CLZC2BdBSKEEB59BOPUM',\n            isRadio: false,\n        }\n    ],\n\n    weather: {\n        key: process.env.REACT_APP_OPEN_WEATHER_KEY,\n        latitude: 41.376681,\n        longitude: 2.176177,\n        units: 'metric',\n        tempSymbol: '°C',\n        lang: 'en',\n        weatherUpdateIntervalSeconds: 3600,\n    }\n}\n\nexport default config;\n","import create from 'zustand';\nimport config from './config';\n\nconst weatherConfig = config.weather;\nconst weatherUpdateIntervalMs = weatherConfig.weatherUpdateIntervalSeconds * 1000;\nconst key = weatherConfig.key;\nconst positionTimeoutMs = 5000;\n\nasync function getCoordinates() {\n    return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => reject(), positionTimeoutMs);;\n        navigator.geolocation.getCurrentPosition(position => {\n            clearTimeout(timeout);\n            resolve(position);\n        }, reject);\n\n    });\n}\n\nasync function getLocation() {\n    const location = {\n        latitude: weatherConfig.latitude,\n        longitude: weatherConfig.longitude\n    }\n    try {\n        const position: any = await getCoordinates();\n        location.latitude = position.coords.latitude;\n        location.longitude = position.coords.longitude;\n    } catch (error) {\n        console.error('Unable to get location', error);\n    }\n    return location;\n}\n\n\nconst useStore = create(\n    set => {\n        async function setWeather() {\n\n            const location = await getLocation();\n\n            const params = `units=${weatherConfig.units}&lang=${weatherConfig.lang}&lat=${location.latitude}&lon=${location.longitude}&exclude=minutely,hourly&appid=${key}`;\n            let url = `https://api.openweathermap.org/data/2.5/onecall?${params}`;\n            if (!key) {\n                url = `https://www.sonicpix.ro/owproxy/?${params}`;\n            }\n            const response = await fetch(url);\n\n            set({ weather: await response.json() });\n        };\n\n        setInterval(() => set({ date: new Date() }), 1000);\n        setInterval(() => setWeather(), weatherUpdateIntervalMs);\n        setWeather();\n        return ({ date: new Date(), weather: null })\n    })\n\n\nexport default useStore;\n","import './Time.scss';\nimport useStore from '../../store';\n\nfunction Time() {\n    const time = useStore((state: any) => \n        state.date.toLocaleTimeString(undefined, {timeStyle: 'short'})\n    );\n\n    return <div className=\"Time\">\n        {time}\n    </div>;\n}\n\nexport default Time;","import useStore from '../../store';\nimport WeatherIcon from 'react-icons-weather';\nimport './Weather.scss';\nimport config from '../../config';\n\nconst temperatureSymbol: string = config.weather.tempSymbol;\n\nfunction getDayPeriodFromUnixTS(ts: number): string {\n    return new Date(ts * 1000).toLocaleString(\n        undefined, { weekday: 'long', dayPeriod: 'short' }\n    )\n}\n\nfunction getDayOfWeeekeStringFromUnixTS(ts: number) {\n    return new Date(ts * 1000).toLocaleDateString(\n        'en', { weekday: 'short', day: 'numeric' }\n    )\n}\n\nfunction getKmPerHourFromMetersPerSecond(metersPerSecond: string) {\n    return Math.round(\n        (parseFloat(metersPerSecond) * 3.6)\n    ).toString() + 'Km/h';\n}\n\nfunction getFormatedTemperature(temp: string) {\n    return Math.round(parseFloat(temp)) + temperatureSymbol;\n}\n\nfunction Weather(props: any) {\n    const weather: any = useStore((state: any) => state.weather);\n\n    const isSimple: boolean = props.simple;\n\n    return (\n        <div className=\"Weather\">\n            {!weather && <div>Loading...</div>}\n            {weather && weather.current &&\n                (isSimple ?\n                    <div>\n                        <WeatherIcon\n                            name=\"owm\"\n                            iconId={weather.current.weather[0].id.toString()} />\n                        &nbsp;&nbsp;\n                        {getFormatedTemperature(weather.current.temp)}\n                    </div>\n                    :\n                    <div className=\"WeatherBackground\">\n                        <div className=\"WeatherCurrent\">\n                            <div className=\"columns is-mobile\">\n                                <div className=\"column WeatherHumidity\">\n                                    H: {weather.current.humidity}%\n                                </div>\n\n                                <div className=\"column\">\n                                    <WeatherIcon\n                                        name=\"owm\"\n                                        iconId={weather.current.weather[0].id.toString()} />\n                                    &nbsp;&nbsp;\n                                    {getFormatedTemperature(weather.current.temp)}\n                                </div>\n\n                                <div className=\"column WeatherWind\">\n                                    W: {getKmPerHourFromMetersPerSecond(weather.current.wind_speed)}\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"WeatherDaily\">\n                            <div className=\"columns is-mobile\">\n                                {weather.daily.map((day: any, key: number) =>\n                                    <div key={key}\n                                        className=\"column\">\n                                        <div>{getDayOfWeeekeStringFromUnixTS(day.dt)}</div>\n                                        <div className=\"WeatherIcon\"><WeatherIcon\n                                            name=\"owm\"\n                                            iconId={day.weather[0].id.toString()} /></div>\n                                        <div>\n                                            {getFormatedTemperature(day.temp.day)}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n\n                        <div className=\"WeatherAlerts\">\n                            {weather.alerts && weather.alerts.map(\n                                (alert: any, key: number) =>\n                                    key === 0 && <div key={key}>\n                                        {getDayPeriodFromUnixTS(alert.start)}: {alert.event}.\n                                    </div>\n                            )}\n                        </div>\n                    </div>\n                )\n            }\n        </div>\n    );\n}\n\nexport default Weather;","import React, {\n    useRef,\n    useState,\n} from 'react';\nimport Time from './components/Time';\nimport Weather from './components/Weather';\nimport ReactPlayer from 'react-player';\nimport { findDOMNode } from 'react-dom';\nimport screenfull from 'screenfull';\nimport config from '../config';\nimport './MediaPlayer.scss';\n\nconst mediaURLLocalStorageKey = 'mediaURL';\nconst streams = config.mediaPlayerStreams;\n\nfunction MediaPlayer() {\n    const playerRef = useRef(null);\n    const [volume, setVolume] = useState(1);\n    const [playing, setPlaying] = useState(false);\n\n    const [url, setURL] = useState(\n        localStorage.getItem(mediaURLLocalStorageKey) || streams[0].url\n    );\n\n    const currentStream = (streams.find(stream => stream.url === url));\n\n    const handleVolumeChange = (event: any) => {\n        setVolume(parseFloat(event.target.value));\n    }\n\n    const setAndSaveURL = (url: string) => {\n        setURL(url);\n        localStorage.setItem(mediaURLLocalStorageKey, url);\n    }\n    const handleStopPropagating = (event: any) =>\n        event.stopPropagation();\n\n    const disableTouchProps = {\n        onTouchEnd: handleStopPropagating,\n        onMouseUp: handleStopPropagating\n    };\n\n\n    const handleClickFullscreen = () => {\n        if (screenfull.isEnabled) {\n            if (playerRef.current) {\n                const el = playerRef.current;\n                const node = findDOMNode(el);\n                screenfull.request(node as Element);\n            }\n        }\n    }\n\n    return <div className=\"MediaPlayer\" >\n        <div className=\"MediaPlayerScreen\">\n            {currentStream?.isRadio &&\n                <div className=\"MediaPlayerScreenName\">\n                    <div>{currentStream.name}</div>\n                </div>\n            }\n\n            <ReactPlayer\n\n                className=\"MediaPlayerReactPlayer\"\n                ref={playerRef}\n                width='100%'\n                height='100%'\n                url={url}\n                playing={playing}\n                controls={false}\n                loop={true}\n                volume={volume}\n                onReady={() => setTimeout(() => setPlaying(true), 1000)}\n            />\n        </div>\n\n        <div className=\"MediaPlayerBottom\">\n\n            <div>\n                <Time />\n            </div>\n            <div>\n                <Weather simple={true} />\n            </div>\n            <div {...disableTouchProps}>\n                <input type='range'\n                    min={0} max={1}\n                    step='any'\n                    value={volume}\n                    onChange={handleVolumeChange} />\n            </div>\n            <div {...disableTouchProps}>\n                <button\n                    className=\"button is-small is-dark\"\n                    onClick={handleClickFullscreen}>\n                    Fullscreen\n                </button>\n            </div>\n            <div {...disableTouchProps}>\n                <div className=\"select is-small is-dark\">\n                    <select\n                        defaultValue={url}\n                        onChange={event => setAndSaveURL(event.target.value)}>\n                        {streams.map((stream: any, key: number) =>\n                            <option\n                                key={key}\n                                value={stream.url}>\n                                {stream.name}\n                            </option>)}\n                    </select>\n                </div>\n\n            </div>\n        </div>\n    </div>;\n}\n\nexport default MediaPlayer;\n","import './MainScreen.scss';\nimport Time from './components/Time';\nimport Weather from './components/Weather';\nimport { useState, useEffect } from 'react';\n\nconst backgrounds = [\n    'v1.gif',\n    'v2.gif',\n    'v4.gif',\n    'v5.gif',\n    'v6.gif',\n    'v7.gif',\n    'v13.gif',\n];\n\nconst backgroundUpdateIntervalSeconds = 900;\n\nfunction MainScreen() {\n    const [backgroundURL, setBackgroundURL] = useState(getRandomBackgrounnd());\n\n    useEffect(() => {\n        const timerID = setInterval(() => setBackgroundURL(\n            getRandomBackgrounnd()),\n            backgroundUpdateIntervalSeconds * 1000\n        );\n\n        return function cleanup() {\n            clearInterval(timerID);\n        };\n    });\n\n    function getRandomBackgrounnd() {\n        return backgrounds[Math.floor(Math.random() * backgrounds.length)];\n    }\n    return <div style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/backgrounds/${backgroundURL})` }} className=\"MainScreen\">\n        <div className=\"top\">\n            <Time />\n        </div>\n        <div className=\"bottom\">\n            <Weather />\n        </div>\n    </div>;\n}\n\nexport default MainScreen;","import './App.scss';\nimport React from 'react';\nimport {\n  Switch,\n  Route,\n  useHistory,\n} from 'react-router-dom';\n\nimport MediaPlayer from './screens/MediaPlayer';\nimport MainScreen from './screens/MainScreen';\n\nconst config = {\n  routes: [\n    /*\n    {\n        path: \"/YouToubePlayer\",\n        component: YouToubePlayer,\n    },\n    */\n    {\n      path: \"/MediaPlayer\",\n      component: MediaPlayer,\n    },\n    {\n      path: \"/\",\n      component: MainScreen\n    },\n  ],\n}\n\nfunction App() {\n  const [touchStart, setTouchStart] = React.useState(0);\n  const [touchEnd, setTouchEnd] = React.useState(0);\n  const history = useHistory();\n\n  const getPosition = (event: any): number =>\n    event.clientX || (\n      (event.targetTouches && event.targetTouches.length > 0) ?\n      event.targetTouches[0].clientX : 0\n    );\n\n  const handleTouchStart = (event: any) => {\n    setTouchStart(getPosition(event));\n    setTouchEnd(getPosition(event));\n  }\n\n  const handleTouchMove = (event: any) => {\n    setTouchEnd(getPosition(event));\n  }\n\n  const handleTouchEnd = (event: any) => {\n\n\n\n    const currentLocation = history.location.pathname;\n    const currentLocationRouteIndex = config.routes.findIndex(\n      (route: any) =>\n        route.path === currentLocation\n    );\n\n    let nextLocationRouteIndex = null;\n\n    if (touchStart - touchEnd > 50) {\n      nextLocationRouteIndex = currentLocationRouteIndex - 1;\n      if (nextLocationRouteIndex < 0) {\n        nextLocationRouteIndex = config.routes.length - 1;\n      }\n\n    };\n\n    if (touchStart - touchEnd < -50) {\n      nextLocationRouteIndex = currentLocationRouteIndex + 1;\n      if (nextLocationRouteIndex > config.routes.length - 1) {\n        nextLocationRouteIndex = 0;\n      }\n\n    }\n\n    if (nextLocationRouteIndex !== null) {\n      history.push(config.routes[nextLocationRouteIndex].path);\n    }\n    setTouchStart(0);\n\n  }\n  return (\n    <div className=\"App\"\n      onMouseDown={handleTouchStart}\n      onMouseMove={handleTouchMove}\n      onMouseUp={handleTouchEnd}\n\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n      onTouchStart={handleTouchStart}\n    >\n      <Switch>\n        {config.routes.map((route: any, i: number) => (\n          <Route\n            key={i}\n            path={route.path}\n            render={props => (\n              <route.component {...props} routes={route.routes} />\n            )}\n          />\n        ))}\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter as Router,\n} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}