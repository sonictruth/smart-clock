{"version":3,"sources":["config.ts","store.ts","screens/components/Time.tsx","screens/components/Weather.tsx","screens/MediaPlayer.tsx","screens/components/WeatherExternal.tsx","screens/MainScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["categories","config","backgroundImageUpdateIntervalSeconds","mediaPlayerStreams","id","name","url","isRadio","category","Radio","weather","apiURL","process","REACT_APP_OPEN_WEATHER_URL","apiKey","REACT_APP_OPEN_WEATHER_KEY","latitude","longitude","units","tempSymbol","lang","weatherUpdateIntervalSeconds","weatherConfig","useStore","create","set","setInterval","date","Date","pad","number","toString","padStart","Time","time","_ref","getHours","getMinutes","_jsx","className","children","temperatureSymbol","getFormatedTemperature","temp","Math","round","parseFloat","Weather","props","state","isSimple","simple","current","_jsxs","WeatherIcon","iconId","humidity","metersPerSecond","wind_speed","daily","map","day","key","ts","dt","toLocaleDateString","weekday","timezone","alerts","alert","start","toLocaleString","undefined","dayPeriod","event","streamIDLocalStorageKey","MediaPlayerState","MediaPlayer","setTimeoutReplayRef","useRef","streamID","setSteamID","useState","localStorage","getItem","mediaPlayerState","setMediaPlayerState","Stopped","volume","setVolume","streams","setStreams","currentStream","setCurrentSteam","streamURL","setStreamURL","lastErrorDetails","setLastErrorDetails","useEffect","clearTimeout","urlSearchParams","URLSearchParams","window","location","search","params","Object","fromEntries","entries","playlist","loadPlaylist","error","console","find","stream","hasError","Loading","errorText","Error","retryStream","setTimeout","async","response","fetch","text","split","reduce","acc","curr","index","line","length","streamNameAndUrl","push","replace","disableTouchProps","onTouchEnd","stopPropagation","onMouseUp","Playing","ReactPlayer","width","height","playing","controls","loop","onPlay","onError","errorObject","handleReactPlayerError","errorInfo","warn","fatal","errorMessage","type","details","min","max","step","value","onChange","target","setItem","handleChannelSelection","_Fragment","keys","categoryName","categoryKey","label","filter","WeatherExternal","script","document","createElement","src","body","appendChild","removeChild","dangerouslySetInnerHTML","__html","backgrounds","Array","from","_","log","routes","path","Component","backgroundURL","setBackgroundURL","getRandomBackground","floor","random","timerID","clearInterval","style","backgroundImage","isFullscreen","App","swipeDirection","setSwipeDirection","touchPositionsRef","end","history","useHistory","useLocation","getPosition","clientX","targetTouches","handleTouchStart","handleTouchMove","handleTouchEnd","currentLocation","pathname","touchPositions","currentLocationRouteIndex","findIndex","route","nextLocationRouteIndex","fullscreenElement","requestFullscreen","onMouseDown","onMouseMove","onTouchMove","onTouchStart","TransitionGroup","component","CSSTransition","classNames","timeout","Switch","Route","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","Router","getElementById"],"mappings":"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","file":"static/js/main.fa9c4944.chunk.js","sourcesContent":["enum categories {\n    Radio = 'Radio',\n    TVInt = 'TV International',\n    TVRO = 'TV Romania',\n}\n\nconst config: Config = {\n\n    backgroundImageUpdateIntervalSeconds: 600,\n\n    mediaPlayerStreams: [\n        // Stream pre-processing for handling tokens, scraping, selecting specific streams \n        /*\n        {\n            id: '150',\n            name: 'Digi 24',\n            url: async () => {\n                const response =\n                    await fetch('https://dai.google.com/linear/hls/event/OQfdjUhHSDSlb1fJVzehsQ/master.m3u8');\n                const playlist =\n                    await response.text();\n                const url = playlist\n                    .split('\\n')\n                    .find(line => line.includes('bandwidth/2917391.m3u8'));\n                return url;\n            },\n            isRadio: false,\n            category: categories.TVRO,\n        },\n        {\n            id: '151',\n            name: 'Antena 3',\n            url: async () => {\n                const response =\n                    await fetch('https://www.antena3.ro/live/');\n                const html =\n                    await response.text();\n                const htmlSplit = html.split(`liveEmbedHTML5('`);\n\n                return htmlSplit[1].split(`'`)[0];\n            },\n            isRadio: false,\n            category: categories.TVRO,\n        },\n        */\n        {\n            id: '41',\n            name: 'Europa FM',\n            url: 'https://astreaming.edi.ro:8443/europafm_aacp48k',\n            isRadio: true,\n            category: categories.Radio,\n        },\n        {\n            id: '43',\n            name: 'Digi FM',\n            url: 'https://edge76.rcs-rds.ro/digifm/digifm.mp3',\n            isRadio: true,\n            category: categories.Radio,\n        },\n        {\n            id: '120',\n            name: 'RadioParadise',\n            url: 'http://stream.radioparadise.com/aac-128',\n            isRadio: true,\n            category: categories.Radio,\n        },\n\n       \n        // Weekly updated Youtube playlist example \n        // {\n        //    id: '140',\n        //    name: 'UK Weekly Playlist',\n        //    url: 'https://youtube.com/playlist?list=PLx0sYbCqOb8Q_CLZC2BdBSKEEB59BOPUM',\n        //    isRadio: false,\n        //},\n    ],\n\n    weather: {\n        apiURL: process.env.REACT_APP_OPEN_WEATHER_URL || 'https://www.sonicpix.ro/owproxy/',\n        apiKey: process.env.REACT_APP_OPEN_WEATHER_KEY || 'nokey',\n        latitude: 41.376681,\n        longitude: 2.176177,\n        units: 'metric',\n        tempSymbol: '°C',\n        lang: 'en',\n        weatherUpdateIntervalSeconds: 3600,\n    }\n}\n\nexport default config;\n","import create from 'zustand';\nimport config from './config';\n\nconst weatherConfig = config.weather;\nconst weatherUpdateIntervalMs = weatherConfig.weatherUpdateIntervalSeconds * 1000;\nconst apiKey = weatherConfig.apiKey;\nconst apiURL = weatherConfig.apiURL;\nconst positionTimeoutMs = 5000;\n\nasync function getCoordinates() {\n    return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => reject(), positionTimeoutMs);;\n        navigator.geolocation.getCurrentPosition(position => {\n            clearTimeout(timeout);\n            resolve(position);\n        }, reject);\n    });\n}\n\nasync function getLocation() {\n    const location = {\n        latitude: weatherConfig.latitude,\n        longitude: weatherConfig.longitude\n    }\n    try {\n        const position: any = await getCoordinates();\n        location.latitude = position.coords.latitude;\n        location.longitude = position.coords.longitude;\n    } catch (error) {\n        console.error('Unable to get location', error);\n    }\n    return location;\n}\n\nconst useStore = create<ClockState>(\n    set => {\n        /*\n        async function setWeather() {\n\n            const location = await getLocation();\n\n            const params = new URLSearchParams({\n                units: weatherConfig.units,\n                lang: weatherConfig.lang,\n                lat: location.latitude.toString(),\n                lon: location.longitude.toString(),\n                exclude: 'minutely,hourly',\n                appid: apiKey,\n            }).toString()\n\n            const callURL = `${apiURL}?${params}`;\n\n            let weather = null;\n            try {\n                const response = await fetch(callURL);\n                weather = await response.json();\n            } catch (error) {\n                console.warn('Unable to fetch weather data', error);\n            }\n\n            set({ weather });\n        };\n        */\n\n        setInterval(() => set({ date: new Date() }), 1000);\n        // setInterval(() => setWeather(), weatherUpdateIntervalMs);\n        // setWeather();\n        return ({ date: new Date(), weather: null })\n    })\n\n\nexport default useStore;\n","import './Time.scss';\nimport useStore from '../../store';\n\nconst pad = function (number: number) {\n    return number.toString().padStart(2, '0');\n}\n\nfunction Time() {\n    const time = useStore(({ date }) =>\n        pad(date.getHours()) + ':' + pad(date.getMinutes())\n    );\n\n    return <div className=\"Time\">\n        {time}\n    </div>;\n}\n\nexport default Time;","import useStore from '../../store';\nimport WeatherIcon from 'react-icons-weather';\nimport './Weather.scss';\nimport config from '../../config';\n\nconst temperatureSymbol: string = config.weather.tempSymbol;\n\nfunction getDayPeriodFromUnixTS(ts: number): string {\n    return new Date(ts * 1000).toLocaleString(\n        undefined, { weekday: 'long', dayPeriod: 'short' }\n    )\n}\n\nfunction getDayOfWeeekeStringFromUnixTS(ts: number) {\n    return new Date(ts * 1000).toLocaleDateString(\n        'en', { weekday: 'short', day: 'numeric' }\n    )\n}\n\nfunction getKmPerHourFromMetersPerSecond(metersPerSecond: string) {\n    return Math.round(\n        (parseFloat(metersPerSecond) * 3.6)\n    ).toString() + 'Km/h';\n}\n\nfunction getFormatedTemperature(temp: string) {\n    return Math.round(parseFloat(temp)) + temperatureSymbol;\n}\n\nfunction Weather(props: any) {\n    const weather: any = useStore((state: any) => state.weather);\n\n    const isSimple: boolean = props.simple;\n\n    return (\n        <div className=\"Weather\">\n            {weather && weather.current &&\n                (isSimple ?\n                    <div>\n                        <WeatherIcon\n                            name=\"owm\"\n                            iconId={weather.current.weather[0].id.toString()} />\n                        &nbsp;&nbsp;\n                        {getFormatedTemperature(weather.current.temp)}\n                    </div>\n                    :\n                    <div className=\"WeatherBackground\">\n                        <div className=\"WeatherCurrent\">\n                            <div className=\"columns is-mobile\">\n                                <div className=\"column WeatherHumidity\">\n                                    H: {weather.current.humidity}%\n                                </div>\n\n                                <div className=\"column\">\n                                    <WeatherIcon\n                                        name=\"owm\"\n                                        iconId={weather.current.weather[0].id.toString()} />\n                                    &nbsp;&nbsp;\n                                    {getFormatedTemperature(weather.current.temp)}\n                                </div>\n\n                                <div className=\"column WeatherWind\">\n                                    W: {getKmPerHourFromMetersPerSecond(weather.current.wind_speed)}\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"WeatherDaily\">\n                            <div className=\"columns is-mobile\">\n                                {weather.daily.map((day: any, key: number) =>\n                                    <div key={key}\n                                        className=\"column\">\n                                        <div>{getDayOfWeeekeStringFromUnixTS(day.dt)}</div>\n                                        <div className=\"WeatherIcon\"><WeatherIcon\n                                            name=\"owm\"\n                                            iconId={day.weather[0].id.toString()} /></div>\n                                        <div>\n                                            {getFormatedTemperature(day.temp.day)}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n\n                        <div className=\"WeatherAlerts\">\n                           Timezone: {weather.timezone}\n\n                            {weather.alerts && weather.alerts.map(\n                                (alert: any, key: number) =>\n                                    key === 0 && <div key={key}>\n                                        {getDayPeriodFromUnixTS(alert.start)}: {alert.event}.\n                                    </div>\n                            )}\n                        </div>\n                    </div>\n                )\n            }\n        </div>\n    );\n}\n\nexport default Weather;","import {\n    useEffect,\n    useState,\n    useRef,\n} from 'react';\nimport Time from './components/Time';\nimport Weather from './components/Weather';\nimport ReactPlayer from 'react-player';\nimport config from '../config';\nimport './MediaPlayer.scss';\n\nconst streamIDLocalStorageKey = 'streamID';\n\nconst streamErrorRetryMs = 10000;\n\nenum MediaPlayerState {\n    Loading = 'loading',\n    Error = 'error',\n    Playing = 'playing',\n    Stopped = 'stopped',\n}\n\nfunction MediaPlayer() {\n\n    const setTimeoutReplayRef = useRef();\n\n    const [streamID, setSteamID] = useState(\n        localStorage.getItem(streamIDLocalStorageKey)\n    );\n\n    const [mediaPlayerState, setMediaPlayerState] =\n        useState<MediaPlayerState>(MediaPlayerState.Stopped);\n\n    const [volume, setVolume] = useState(1);\n\n    const [streams, setStreams] = useState<Stream[]>();\n\n    const [currentStream, setCurrentSteam] = useState<Stream>();\n\n    const [streamURL, setStreamURL] = useState('');\n\n    const [lastErrorDetails, setLastErrorDetails] = useState('');\n\n    useEffect(() => () =>\n        clearTimeout(setTimeoutReplayRef.current)\n        , []);\n\n    useEffect(() => {\n        (async () => {\n            let streams: Stream[] = config.mediaPlayerStreams;\n            try {\n                const urlSearchParams = new URLSearchParams(window.location.search);\n                const params = Object.fromEntries(urlSearchParams.entries());\n                if (params.playlist) {\n                    streams = await loadPlaylist(params.playlist);\n                }\n            } catch (error) {\n                console.error('Unable to load custom playlist', error);\n            }\n            setStreams(streams);\n        })();\n    }, []);\n\n    useEffect(() =>\n        setCurrentSteam(\n            streams?.find(stream => stream.id === streamID)\n        )\n        , [streamID, streams]);\n\n    useEffect(() => {\n        (async () => {\n            let url;\n            let hasError = false;\n            setMediaPlayerState(MediaPlayerState.Loading);\n\n            try {\n                if (currentStream) {\n                    if (typeof currentStream.url === 'function') {\n                        url = await currentStream.url();\n                    } else {\n                        url = currentStream.url;\n                    }\n                }\n            } catch (error) {\n                const errorText = 'Unable to get custom URL';\n                setLastErrorDetails(errorText);\n                console.error(errorText, error);\n                hasError = true;\n            }\n\n            if (hasError) {\n                setLastErrorDetails('Unable to load custom url');\n                setMediaPlayerState(MediaPlayerState.Error);\n                retryStream(currentStream);\n            } else {\n                setMediaPlayerState(\n                    url ? MediaPlayerState.Loading : MediaPlayerState.Stopped\n                );\n            }\n            setStreamURL(url);\n        })()\n    }, [currentStream]);\n\n    const retryStream = (currentStream: Stream | undefined) => {\n        clearTimeout(setTimeoutReplayRef.current);\n        setStreamURL('');\n        setTimeoutReplayRef.current = setTimeout(() => {\n            if (currentStream) {\n                setCurrentSteam({ ...currentStream });\n            }\n        }, streamErrorRetryMs) as any;\n    }\n\n    const loadPlaylist = async (url: string): Promise<Stream[]> => {\n        const response = await fetch(url);\n        const playlist = await response.text();\n        const streams = playlist\n            .split('#EXTINF:')\n            .reduce(\n                (acc, curr, index) => {\n                    const line = curr.split(',');\n                    if (line.length === 2) {\n                        const streamNameAndUrl = line[1].split('\\n');\n                        acc.push({\n                            id: index.toString(),\n                            name: streamNameAndUrl[0],\n                            url: streamNameAndUrl[1]\n                                .replace('http://', 'https://'),\n                            isRadio: false,\n                            category: 'IPTV'\n                        });\n                    }\n                    return acc;\n                }, [] as Stream[]);\n        return streams;\n    }\n\n    const handleChannelSelection = (streamID: string) => {\n        setLastErrorDetails('');\n        clearTimeout(setTimeoutReplayRef.current);\n        setSteamID(streamID);\n        localStorage.setItem(streamIDLocalStorageKey, streamID);\n    }\n\n    const handleVolumeChange = (event: any) =>\n        setVolume(parseFloat(event.target.value));\n\n    const handleReactPlayerOnPlay = () => {\n        setMediaPlayerState(MediaPlayerState.Playing);\n    }\n\n    const handleReactPlayerError = (error: any, errorInfo: any) => {\n        console.warn('React player error:', error, errorInfo);\n        if (errorInfo?.fatal === true) {\n            setMediaPlayerState(MediaPlayerState.Error);\n            const errorMessage = errorInfo?.type ? `${errorInfo.type} ${errorInfo.details}` : 'Unknown error';\n            setLastErrorDetails(errorMessage);\n            console.warn('Retry');\n            retryStream(currentStream);\n        }\n    }\n\n    const disableTouchProps = {\n        onTouchEnd: (event: any) =>\n            event.stopPropagation(),\n        onMouseUp: (event: any) =>\n            event.stopPropagation(),\n    };\n\n    return <div className=\"MediaPlayer\" >\n        <div className=\"MediaPlayerScreen\">\n            {(mediaPlayerState === MediaPlayerState.Stopped) &&\n                <div className=\"MediaPlayerScreen-info\">\n                    <h1>Media Player 📺</h1>\n                </div>\n            }\n            {(mediaPlayerState === MediaPlayerState.Error) &&\n                <div className=\"MediaPlayerScreen-status\">\n                    <h1>😢 Error</h1>\n                    <div>We are having problems loading {currentStream?.name}.</div>\n                    <small>{lastErrorDetails}</small>\n                </div>\n            }\n            {(mediaPlayerState === MediaPlayerState.Loading) &&\n                <div className=\"MediaPlayerScreen-status\">\n                    <h1>⏳</h1>\n                    Loading {currentStream?.name}...\n                </div>\n            }\n            {(mediaPlayerState === MediaPlayerState.Playing && currentStream?.isRadio) &&\n                <div className=\"MediaPlayerScreen-status\">\n                    <h2>📻{currentStream.name}</h2>\n                    <h1><Time /></h1>\n                </div>\n            }\n            {\n                <ReactPlayer\n                    className=\"MediaPlayerReactPlayer\"\n                    width='100%'\n                    height='100%'\n                    url={streamURL}\n                    playing={true}\n                    controls={false}\n                    loop={true}\n                    volume={volume}\n                    onPlay={() => handleReactPlayerOnPlay()}\n                    onError={(error: any, errorObject: any) =>\n                        handleReactPlayerError(error, errorObject)}\n                />\n            }\n        </div>\n\n        <div className=\"MediaPlayerBottom\">\n\n            <div>\n                <Time />\n            </div>\n            <div>\n                <Weather simple={true} />\n            </div>\n            <div {...disableTouchProps}>\n                <input type='range'\n                    min={0} max={1}\n                    step='any'\n                    value={volume}\n                    onChange={handleVolumeChange} />\n            </div>\n            <div {...disableTouchProps}>\n                <div className=\"select is-small is-dark\">\n                    <select\n                        value={streamID || ''}\n                        onChange={event => handleChannelSelection(event.target.value)}>\n                        <option\n                            value=''>\n                            ⇨ Choose channel\n                        </option>\n                        {streams &&\n                            <>\n                                {\n                                    Object.keys(streams\n                                        .reduce((acc, stream) => {\n                                            acc[stream.category] = stream.category;\n                                            return acc;\n                                        }, {} as any))\n                                        .map((categoryName, categoryKey) =>\n                                            <optgroup key={categoryKey} label={categoryName}>\n                                                {streams\n                                                    .filter(stream => stream.category === categoryName)\n                                                    .map((stream: any, key: number) =>\n                                                        <option\n                                                            key={key}\n                                                            value={stream.id}>\n                                                            {stream.name}\n                                                        </option>)}\n                                            </optgroup>\n                                        )\n                                }\n                            </>\n                        }\n                    </select>\n                </div>\n\n            </div>\n        </div>\n    </div>;\n}\n\nexport default MediaPlayer;\n","import { useEffect } from \"react\";\n\nconst widgetHTML = `\n<div id=\"ww_e61a7c4847e9\" v='1.3' loc='id' a='{\"t\":\"responsive\",\"lang\":\"en\",\"sl_lpl\":1,\"ids\":[\"wl955\"],\"font\":\"Arial\",\"sl_ics\":\"one_a\",\"sl_sot\":\"celsius\",\"cl_bkg\":\"#000000\",\"cl_font\":\"#FFFFFF\",\"cl_cloud\":\"#FFFFFF\",\"cl_persp\":\"#81D4FA\",\"cl_sun\":\"#FFC107\",\"cl_moon\":\"#FFC107\",\"cl_thund\":\"#FF5722\",\"cl_odd\":\"#FFFFFF17\",\"sl_tof\":\"5\"}'>More forecasts: <a href=\"https://oneweather.org/es/madrid/25_days/\" id=\"ww_e61a7c4847e9_u\" target=\"_blank\">Tiempo 25 días Madrid</a></div>\n`;\n\nfunction WeatherExternal(props: any) {\n    useEffect(() => {\n        const script = document.createElement(\"script\");\n        script.src = \"https://app3.weatherwidget.org/js/?id=ww_e61a7c4847e9\";\n        script.async = true;\n        document.body.appendChild(script);\n\n        // Cleanup script on component unmount\n        return () => {\n            document.body.removeChild(script);\n        };\n    }, []);\n\n    return <div dangerouslySetInnerHTML={{ __html: widgetHTML }} />;\n}\n\nexport default WeatherExternal;","import './MainScreen.scss';\nimport Time from './components/Time';\n// import Weather from './components/Weather';\nimport WeatherExternal from './components/WeatherExternal';\n\n\nimport {\n    useState,\n    useEffect,\n} from 'react';\nimport config from '../config';\n\nconst TOTAL_BACKGROUNDS = 167;\nconst backgrounds = Array.from({ length: TOTAL_BACKGROUNDS }, (_, index) => `d${index + 1}.jpg`);\n\nconsole.log(backgrounds);\n\nconst backgroundImageUpdateIntervalSeconds\n    = config.backgroundImageUpdateIntervalSeconds;\n\nfunction MainScreen() {\n    const [backgroundURL, setBackgroundURL] = useState(getRandomBackground());\n\n    useEffect(() => {\n        const timerID = setInterval(() => setBackgroundURL(\n            getRandomBackground()),\n            backgroundImageUpdateIntervalSeconds * 1000\n        );\n        return () => clearInterval(timerID);\n    }, []);\n\n    function getRandomBackground() {\n        return backgrounds[Math.floor(Math.random() * backgrounds.length)];\n    }\n\n    return <div\n        className=\"MainScreen\"\n        style={{\n            backgroundImage:\n                `url(${process.env.PUBLIC_URL}/backgrounds_andrei/${backgroundURL})`\n        }}>\n        <div className=\"top\" >\n            <Time />\n        </div>\n        <div className=\"bottom\">\n            <WeatherExternal />\n        </div>\n    </div>;\n}\n\nexport default MainScreen;\n","import './App.scss';\nimport {\n  useRef,\n  useState,\n} from 'react';\nimport {\n  Route,\n  useHistory,\n  useLocation,\n  Switch,\n} from 'react-router-dom';\n\nimport {\n  TransitionGroup,\n  CSSTransition,\n} from 'react-transition-group';\n\nimport MediaPlayer from './screens/MediaPlayer';\nimport MainScreen from './screens/MainScreen';\n\nconst config = {\n  routes: [\n    {\n      path: \"/MediaPlayer\",\n      Component: MediaPlayer,\n    },\n    {\n      path: \"/\",\n      Component: MainScreen,\n    },\n  ],\n}\n\nlet isFullscreen = false;\n\nfunction App() {\n\n  const [swipeDirection, setSwipeDirection]\n    = useState<'left' | 'right'>('left');\n\n  const touchPositionsRef = useRef<TouchPosition>({\n    start: 0,\n    end: 0\n  });\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const getPosition = (event: any): number =>\n    event.clientX || (\n      (event.targetTouches && event.targetTouches.length > 0) ?\n        event.targetTouches[0].clientX : 0\n    );\n\n  const handleTouchStart = (event: any) => {\n    touchPositionsRef.current.start = getPosition(event);\n    touchPositionsRef.current.end = getPosition(event);\n  }\n\n  const handleTouchMove = (event: any) => {\n    touchPositionsRef.current.end = getPosition(event);\n  }\n\n  const handleTouchEnd = (event: any) => {\n    const currentLocation = history.location.pathname;\n    const touchPositions = touchPositionsRef.current;\n    const currentLocationRouteIndex = config.routes.findIndex(\n      (route: any) =>\n        route.path === currentLocation\n    );\n\n    let nextLocationRouteIndex = null;\n\n    if (touchPositions.start - touchPositions.end > 50) {\n      nextLocationRouteIndex = currentLocationRouteIndex - 1;\n      if (nextLocationRouteIndex < 0) {\n        nextLocationRouteIndex = config.routes.length - 1;\n      }\n      setSwipeDirection('left');\n    } else if (touchPositions.start - touchPositions.end < -50) {\n      nextLocationRouteIndex = currentLocationRouteIndex + 1;\n      if (nextLocationRouteIndex > config.routes.length - 1) {\n        nextLocationRouteIndex = 0;\n      }\n      setSwipeDirection('right');\n    } else {\n      if(!isFullscreen || document.fullscreenElement === null) {\n        try {\n        document.body.requestFullscreen();\n        isFullscreen = true;\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n\n    if (nextLocationRouteIndex !== null) {\n      history.push(config.routes[nextLocationRouteIndex].path);\n    }\n    touchPositions.start = 0;\n\n  }\n  return (\n    <div\n      className={`App AppSwipe-${swipeDirection}`}\n      onMouseDown={handleTouchStart}\n      onMouseMove={handleTouchMove}\n      onMouseUp={handleTouchEnd}\n\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n      onTouchStart={handleTouchStart}\n    >\n      <div className=\"AppPortraitWarning\">\n        ⚠️ Please rotate your device.\n      </div>\n\n      <TransitionGroup\n        component={null}\n      >\n        <CSSTransition\n          key={location.pathname}\n          classNames=\"AppScreen\"\n          timeout={300}\n        /* FIXME: findDomNode warning*/\n        /* nodeRef={screenNodeRef} */\n        >\n          <Switch location={location}>\n            {config.routes.map(({ path, Component }) => (\n              <Route\n                key={path}\n                path={path}\n              >\n                <div\n                  /* ref={screenNodeRef} */\n                  className=\"AppScreen\"  >\n                  <Component />\n                </div>\n              </Route>\n            ))}\n          </Switch>\n        </CSSTransition>\n      </TransitionGroup>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter as Router,\n} from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}