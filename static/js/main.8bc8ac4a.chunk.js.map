{"version":3,"sources":["screens/Time.tsx","screens/Weather.tsx","screens/MediaPlayer.tsx","config.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Time","useState","Date","date","setDate","useEffect","timerID","setInterval","clearInterval","className","toLocaleTimeString","Weather","style","backgroundColor","width","height","MediaPlayer","playerRef","useRef","volume","setVolume","playing","setPlaying","config","mediaPlayerStreams","url","setURL","handleStopPropagating","event","stopPropagation","ref","controls","loop","onReady","onStart","onTouchEnd","onMouseUp","type","min","max","step","value","onChange","parseFloat","target","onClick","screenfull","isEnabled","current","el","node","findDOMNode","request","map","stream","key","name","routes","path","component","App","React","touchStart","setTouchStart","touchEnd","setTouchEnd","history","useHistory","getPosition","clientX","targetTouches","handleTouchStart","handleTouchMove","handleTouchEnd","currentLocation","location","pathname","currentLocationRouteIndex","findIndex","route","nextLocationRouteIndex","length","push","onMouseDown","onMouseMove","onTouchMove","onTouchStart","i","render","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bc8ac4a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport './Time.css';\n\nfunction Time() {\n    const [date, setDate] = useState(new Date());\n    useEffect(() => {\n        var timerID = setInterval(() => tick(), 1000);\n        return function cleanup() {\n            clearInterval(timerID);\n        };\n    });\n    function tick() {\n        setDate(new Date());\n    }\n    return <div className=\"Time\">\n        {date.toLocaleTimeString()}\n    </div>;\n}\n\nexport default Time;","function Weather() {\n    return <div style={{backgroundColor: 'red', width: '100%', height: '100%'}}>Weather</div>;\n}\n\nexport default Weather;","import React, {\n    useRef,\n    useState,\n    useEffect,\n} from 'react';\nimport Time from './Time';\nimport ReactPlayer from 'react-player';\nimport { findDOMNode } from 'react-dom';\nimport screenfull from 'screenfull';\nimport config from '../config';\nimport './MediaPlayer.css';\n\nfunction MediaPlayer() {\n    const playerRef = useRef(null);\n    const [volume, setVolume] = useState(1);\n    const [playing, setPlaying] = useState(false);\n    const [url, setURL] = useState(config.mediaPlayerStreams[0].url);\n\n    useEffect(() => {\n\n\n    }, []);\n\n    const handleVolumeChange = (event: any) => {\n        setVolume(parseFloat(event.target.value));\n    }\n\n    const handleStopPropagating = (event: any) =>\n        event.stopPropagation();\n\n\n    const handleClickFullscreen = () => {\n        if (screenfull.isEnabled) {\n            if (playerRef.current) {\n                const el = playerRef.current;\n                const node = findDOMNode(el);\n                screenfull.request(node as Element);\n            }\n        }\n    }\n\n    return <div className=\"MediaPlayer\" >\n        <div className=\"MediaPlayerScreen\">\n            <ReactPlayer\n                ref={playerRef}\n                className='react-player'\n                width='100%'\n                height='100%'\n                url={url}\n                playing={playing}\n                controls={false}\n                loop={true}\n                volume={volume}\n                onReady={() => setPlaying(true)}\n                onStart={() => { }}\n            />\n        </div>\n        <div className=\"MediaPlayerTime\">\n            <Time />\n        </div>\n        <div className=\"MediaPlayerControls\"\n            onTouchEnd={handleStopPropagating}\n            onMouseUp={handleStopPropagating}\n        >\n            <input type='range'\n                min={0} max={1}\n                step='any'\n                value={volume}\n                onChange={handleVolumeChange} />\n            <br />\n            <button onClick={handleClickFullscreen}>Fullscreen</button>\n            <br />\n            <ul>\n                {config.mediaPlayerStreams.map((stream: any, key: number) =>\n                    <li>\n                        <button key={key} onClick={() => setURL(stream.url)}>{stream.name}</button>\n                    </li>\n                )}\n            </ul>\n\n        </div>\n    </div>;\n}\n\nexport default MediaPlayer;\n","import Time from './screens/Time';\nimport Weather from './screens/Weather';\n// import YouToubePlayer from './screens/YouToubePlayer';\nimport MediaPlayer from './screens/MediaPlayer';\n\nconst config: any = {};\n\nconfig.youtubePlaylistURL = 'https://www.youtube.com/embed/videoseries?list=PLywsZdsYYHTZNdHTYDNooq86TCJLPCjoK';\n\nconfig.mediaPlayerStreams = [\n    {\n        name: 'iCat',\n        url: 'https://directes-radio-int.ccma.cat/int/mp4:icatfm/playlist.m3u8'\n    },\n    {\n        name: 'Live Youtube',\n        url: 'https://www.youtube.com/embed/videoseries?list=PLywsZdsYYHTZNdHTYDNooq86TCJLPCjoK',\n    },\n]\n\nconfig.routes = [\n    /*\n    {\n        path: \"/YouToubePlayer\",\n        component: YouToubePlayer,\n    },\n    */\n    {\n        path: \"/MediaPlayer\",\n        component: MediaPlayer,\n    },\n    {\n        path: \"/weather\",\n        component: Weather\n    },\n    {\n        path: \"/\",\n        component: Time\n    },\n];\n\nexport default config;\n","import './App.css';\nimport React from 'react';\nimport {\n  Switch,\n  Route,\n  useHistory,\n} from 'react-router-dom';\n\nimport config from './config';\n\nfunction App() {\n  const [touchStart, setTouchStart] = React.useState(0);\n  const [touchEnd, setTouchEnd] = React.useState(0);\n  const history = useHistory();\n\n  const getPosition = (event: any): number =>\n    event.clientX || event.targetTouches[0].clientX;\n\n  const handleTouchStart = (event: any) => {\n    setTouchStart(getPosition(event));\n    setTouchEnd(getPosition(event));\n  }\n    \n  const handleTouchMove = (event: any) => {\n    setTouchEnd(getPosition(event));\n  }\n\n  const handleTouchEnd = (event: any) => {\n\n   \n\n    const currentLocation = history.location.pathname;\n    const currentLocationRouteIndex = config.routes.findIndex(\n      (route: any) =>\n        route.path === currentLocation\n    );\n\n    let nextLocationRouteIndex = null;\n\n    if (touchStart - touchEnd > 50) {\n      nextLocationRouteIndex = currentLocationRouteIndex - 1;\n      if (nextLocationRouteIndex < 0) {\n        nextLocationRouteIndex = config.routes.length - 1;\n      }\n      \n    };\n\n    if (touchStart - touchEnd < -50) {\n      nextLocationRouteIndex = currentLocationRouteIndex + 1;\n      if (nextLocationRouteIndex > config.routes.length - 1) {\n        nextLocationRouteIndex = 0;\n      }\n     \n    }\n\n    if(nextLocationRouteIndex !== null) {\n      history.push(config.routes[nextLocationRouteIndex].path);\n    }\n    setTouchStart(0);\n\n  }\n  return (\n    <div className=\"App\"\n      onMouseDown={handleTouchStart}\n      onMouseMove={handleTouchMove}\n      onMouseUp={handleTouchEnd}\n\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n      onTouchStart={handleTouchStart}\n    >\n      <Switch>\n        {config.routes.map((route: any, i: number) => (\n          <Route\n            key={i}\n            path={route.path}\n            render={props => (\n              <route.component {...props} routes={route.routes} />\n            )}\n          />\n        ))}\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter as Router,\n} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}