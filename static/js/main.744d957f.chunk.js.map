{"version":3,"sources":["screens/Time.tsx","screens/Weather.tsx","config.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Time","Weather","style","backgroundColor","width","height","config","routes","path","component","App","React","useState","touchStart","setTouchStart","touchEnd","setTouchEnd","history","useHistory","handleTouchStart","event","x","clientX","targetTouches","handleTouchMove","handleTouchEnd","preventDefault","console","log","push","className","onMouseDown","onMouseMove","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","map","route","i","render","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"6PAIeA,MAJf,WACI,OAAO,uCCGIC,MAJf,WACI,OAAO,qBAAKC,MAAO,CAACC,gBAAiB,MAAOC,MAAO,OAAQC,OAAQ,QAA5D,sBCCLC,EAAa,GAGnBA,EAAOC,OAAS,CACZ,CACIC,KAAM,WACNC,UAAWR,GAEf,CACIO,KAAM,IACNC,UAAWT,IAIJM,QCoDAI,MA1Df,WACE,MAAoCC,IAAMC,SAAS,GAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCH,IAAMC,SAAS,GAA/C,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,cAEVC,EAAmB,SAACC,GACxB,IAAMC,EAAID,EAAME,SAAWF,EAAMG,cAAc,GAAGD,QAClDR,EAAcO,IAGVG,EAAkB,SAACJ,GACvB,GAAmB,IAAfP,EAAkB,CACpB,IAAMQ,EAAID,EAAME,SAAWF,EAAMG,cAAc,GAAGD,QAClDN,EAAYK,KAIVI,EAAiB,SAACL,GAEtBA,EAAMM,iBAIFb,EAAaE,EAAW,KAC1BY,QAAQC,IAAI,OAASX,GAGnBJ,EAAaE,GAAY,MAC3BY,QAAQC,IAAI,SACZX,EAAQY,KAAK,aAEff,EAAc,IAEhB,OACE,qBAAKgB,UAAU,MACbC,YAAaZ,EACba,YAAaR,EACbS,UAAWR,EAEXS,WAAYT,EACZU,YAAaX,EACbY,aAAcjB,EAPhB,SASE,cAAC,IAAD,UACGb,EAAOC,OAAO8B,KAAI,SAACC,EAAYC,GAAb,OACjB,cAAC,IAAD,CAEE/B,KAAM8B,EAAM9B,KACZgC,OAAQ,SAAAC,GAAK,OACX,cAACH,EAAM7B,UAAP,2BAAqBgC,GAArB,IAA4BlC,OAAQ+B,EAAM/B,YAHvCgC,WC1CFG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASX,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,IAAD,UACA,cAAC,EAAD,QAGFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.744d957f.chunk.js","sourcesContent":["function Time() {\n    return <h2>Time</h2>;\n}\n\nexport default Time;","function Weather() {\n    return <div style={{backgroundColor: 'red', width: '100%', height: '100%'}}>Weather</div>;\n}\n\nexport default Weather;","import Time from './screens/Time';\nimport Weather from './screens/Weather';\nconst config:any = {};\n\n\nconfig.routes = [\n    {\n        path: \"/weather\",\n        component: Weather\n    },\n    {\n        path: \"/\",\n        component: Time\n    },\n];\n\nexport default config;\n","import './App.css';\nimport React from 'react';\nimport {\n  Switch,\n  Route,\n  useHistory,\n} from 'react-router-dom';\n\nimport config from './config';\n\nfunction App() {\n  const [touchStart, setTouchStart] = React.useState(0);\n  const [touchEnd, setTouchEnd] = React.useState(0);\n  const history = useHistory();\n\n  const handleTouchStart = (event: any) => {\n    const x = event.clientX || event.targetTouches[0].clientX;\n    setTouchStart(x);\n  }\n\n  const handleTouchMove = (event: any) => {\n    if (touchStart !== 0) {\n      const x = event.clientX || event.targetTouches[0].clientX;\n      setTouchEnd(x);\n    }\n  }\n\n  const handleTouchEnd = (event: any) => {\n\n    event.preventDefault();\n\n\n\n    if (touchStart - touchEnd > 150) {\n      console.log('left',  history);\n    };\n\n    if (touchStart - touchEnd < -150) {\n      console.log('right');\n      history.push('/weather');\n    }\n    setTouchStart(0);\n  }\n  return (\n    <div className=\"App\"\n      onMouseDown={handleTouchStart}\n      onMouseMove={handleTouchMove}\n      onMouseUp={handleTouchEnd}\n\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n      onTouchStart={handleTouchStart}\n    >\n      <Switch>\n        {config.routes.map((route: any, i: number) => (\n          <Route\n            key={i}\n            path={route.path}\n            render={props => (\n              <route.component {...props} routes={route.routes} />\n            )}\n          />\n        ))}\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}