{"version":3,"sources":["screens/Time.tsx","screens/Weather.tsx","screens/Video.tsx","config.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Time","Weather","style","backgroundColor","width","height","Video","src","console","log","onClick","allow","title","config","routes","path","component","App","React","useState","touchStart","setTouchStart","touchEnd","setTouchEnd","history","useHistory","handleTouchStart","event","x","clientX","targetTouches","handleTouchMove","handleTouchEnd","preventDefault","currentLocation","location","pathname","currentLocationRouteIndex","findIndex","route","nextLocationRouteIndex","length","push","className","onMouseDown","onMouseMove","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","map","i","render","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"6PAIeA,MAJf,WACI,OAAO,uCCGIC,MAJf,WACI,OAAO,qBAAKC,MAAO,CAACC,gBAAiB,MAAOC,MAAO,OAAQC,OAAQ,QAA5D,sBCiBIC,MAhBf,WAGI,IAAMC,EAAM,qMAEZ,OADAC,QAAQC,IAAIF,GACL,wBACHG,QAAS,kBAAKF,QAAQC,IAAI,SAC1BL,MAAM,OACNC,OAAO,OACPM,MAAM,WACNJ,IAAKA,EACLK,MAAM,0BCTRC,EAAa,CAEnBA,gBAAyB,6CAEzBA,EAAOC,OAAS,CACZ,CACIC,KAAM,SACNC,UAAWV,GAEf,CACIS,KAAM,WACNC,UAAWf,GAEf,CACIc,KAAM,IACNC,UAAWhB,IAIJa,QCyDAI,MAtEf,WACE,MAAoCC,IAAMC,SAAS,GAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCH,IAAMC,SAAS,GAA/C,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,cAEVC,EAAmB,SAACC,GACxB,IAAMC,EAAID,EAAME,SAAWF,EAAMG,cAAc,GAAGD,QAClDR,EAAcO,IAGVG,EAAkB,SAACJ,GACvB,GAAmB,IAAfP,EAAkB,CACpB,IAAMQ,EAAID,EAAME,SAAWF,EAAMG,cAAc,GAAGD,QAClDN,EAAYK,KAIVI,EAAiB,SAACL,GAEtBA,EAAMM,iBAEN,IAAMC,EAAkBV,EAAQW,SAASC,SACnCC,EAA4BxB,EAAOC,OAAOwB,WAC9C,SAACC,GAAD,OACEA,EAAMxB,OAASmB,KAGfM,EAAyB,EAEzBpB,EAAaE,EAAW,MAC1BkB,EAAyBH,EAA4B,GACxB,IAC3BG,EAAyB3B,EAAOC,OAAO2B,OAAS,GAIhDrB,EAAaE,GAAY,MAC3BkB,EAAyBH,EAA4B,GACxBxB,EAAOC,OAAO2B,OAAS,IAClDD,EAAyB,GAG7BhB,EAAQkB,KAAK7B,EAAOC,OAAO0B,GAAwBzB,MACnDM,EAAc,IAEhB,OACE,qBAAKsB,UAAU,MACbC,YAAalB,EACbmB,YAAad,EACbe,UAAWd,EAEXe,WAAYf,EACZgB,YAAajB,EACbkB,aAAcvB,EAPhB,SASE,cAAC,IAAD,UACGb,EAAOC,OAAOoC,KAAI,SAACX,EAAYY,GAAb,OACjB,cAAC,IAAD,CAEEpC,KAAMwB,EAAMxB,KACZqC,OAAQ,SAAAC,GAAK,OACX,cAACd,EAAMvB,UAAP,2BAAqBqC,GAArB,IAA4BvC,OAAQyB,EAAMzB,YAHvCqC,WCtDFG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASX,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,IAAD,UACA,cAAC,EAAD,QAGFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e3f00132.chunk.js","sourcesContent":["function Time() {\n    return <h2>Time</h2>;\n}\n\nexport default Time;","function Weather() {\n    return <div style={{backgroundColor: 'red', width: '100%', height: '100%'}}>Weather</div>;\n}\n\nexport default Weather;","import config from '../config';\n\nfunction Video() {\n    //const origin = document.location.origin;\n    //const src = `${config.youtubeVideoURL}?controls=0&autoplay=1&mute=0&enablejsapi=1&origin=${origin}`;\n    const src = 'https://www.youtube.com/embed/oUFJJNQGwhk?autoplay=1&mute=0&controls=0&origin=https%3A%2F%2Fcookpete.com&playsinline=1&showinfo=0&rel=0&iv_load_policy=3&modestbranding=1&enablejsapi=1&widgetid=3';\n    console.log(src);\n    return <iframe\n        onClick={()=> console.log('xxxx')}\n        width=\"100%\"\n        height=\"100%\"\n        allow=\"autoplay\"\n        src={src}\n        title=\"YouTube video player\"\n    >\n    </iframe>;\n}\n\nexport default Video;","import Time from './screens/Time';\nimport Weather from './screens/Weather';\nimport Video from './screens/Video';\n\nconst config:any = {};\n\nconfig.youtubeVideoURL = 'https://www.youtube.com/embed/sPgqEHsONK8';\n\nconfig.routes = [\n    {\n        path: \"/video\",\n        component: Video\n    },\n    {\n        path: \"/weather\",\n        component: Weather\n    },\n    {\n        path: \"/\",\n        component: Time\n    },\n];\n\nexport default config;\n","import './App.css';\nimport React from 'react';\nimport {\n  Switch,\n  Route,\n  useHistory,\n} from 'react-router-dom';\n\nimport config from './config';\n\nfunction App() {\n  const [touchStart, setTouchStart] = React.useState(0);\n  const [touchEnd, setTouchEnd] = React.useState(0);\n  const history = useHistory();\n\n  const handleTouchStart = (event: any) => {\n    const x = event.clientX || event.targetTouches[0].clientX;\n    setTouchStart(x);\n  }\n\n  const handleTouchMove = (event: any) => {\n    if (touchStart !== 0) {\n      const x = event.clientX || event.targetTouches[0].clientX;\n      setTouchEnd(x);\n    }\n  }\n\n  const handleTouchEnd = (event: any) => {\n\n    event.preventDefault();\n\n    const currentLocation = history.location.pathname;\n    const currentLocationRouteIndex = config.routes.findIndex(\n      (route: any) =>\n        route.path === currentLocation\n    );\n\n    let nextLocationRouteIndex = 0;\n\n    if (touchStart - touchEnd > 150) {\n      nextLocationRouteIndex = currentLocationRouteIndex - 1;\n      if (nextLocationRouteIndex < 0) {\n        nextLocationRouteIndex = config.routes.length - 1;\n      }\n    };\n\n    if (touchStart - touchEnd < -150) {\n      nextLocationRouteIndex = currentLocationRouteIndex + 1;\n      if (nextLocationRouteIndex > config.routes.length - 1) {\n        nextLocationRouteIndex = 0;\n      }\n    }\n    history.push(config.routes[nextLocationRouteIndex].path);\n    setTouchStart(0);\n  }\n  return (\n    <div className=\"App\"\n      onMouseDown={handleTouchStart}\n      onMouseMove={handleTouchMove}\n      onMouseUp={handleTouchEnd}\n\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n      onTouchStart={handleTouchStart}\n    >\n      <Switch>\n        {config.routes.map((route: any, i: number) => (\n          <Route\n            key={i}\n            path={route.path}\n            render={props => (\n              <route.component {...props} routes={route.routes} />\n            )}\n          />\n        ))}\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter as Router,\n} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}